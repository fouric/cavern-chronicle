(in-package :cavern-chronicle)

(defun play ()
  (let ((window-width 640)
	(window-height 480))
    (sdl2:with-init (:everything)
      (sdl2-ttf:init)
      (sdl2:with-window (window :w window-width :h window-height :flags '(:shown :opengl))
	(sdl2:with-renderer (renderer window :flags '(:accelerated))
	  ;; use "ubuntu" or some other nicer font in the future (ubuntu mono?)
	  (let ((font (sdl2-ttf:open-font (asdf:system-relative-pathname 'cli "fonts/Ubuntu-M.ttf") 36))
		(r 255)
		(g 0)
		(b 255)
		(x 100)
		(y 100)
		surface
		texture
		rect
		(text "TESTING asdf"))
	    (flet ((unrender ()
		     (when surface (sdl2:free-surface surface))
		     (when texture (sdl2:destroy-texture texture))
		     (when rect (sdl2:free-rect rect)))
		   (render ()
		     (setf surface ;;(sdl2-ttf:render-text-solid font text r g b 255)
			   (sdl2-ttf:render-text-blended font text r g b 255)
			   texture (sdl2:create-texture-from-surface renderer surface)
			   rect (sdl2:make-rect x y (sdl2:texture-width texture) (sdl2:texture-height texture)))))
	      (sdl2:with-event-loop (:method :poll)
		(:keydown (:keysym keysym)
			  (print-keysym keysym))
		(:keyup (:keysym keysym)
			(when (sdl2:scancode= (sdl2:scancode-value keysym) :scancode-escape)
			  (sdl2:push-event :quit)))
		(:mousemotion (:x x :y y :xrel xrel :yrel yrel :state state)
			      (format t "Mouse motion abs(rel): ~a (~a), ~a (~a)~%Mouse state: ~a~%" x xrel y yrel state))
		(:idle ()
		       (sdl2:set-render-draw-color renderer 40 40 40 255)
		       (sdl2:render-clear renderer)

		       (render)
		       (when (and renderer rect texture)
			 (sdl2:render-copy renderer texture :source-rect (cffi:null-pointer) :dest-rect rect))

		       (let ((rect (sdl2:make-rect 0 0 40 window-height)))
			 (sdl2:set-render-draw-color renderer 241 100 55 255)
			 (sdl2:render-fill-rect renderer rect))

		       (sdl2:render-present renderer)

		       (unrender))
		(:quit () t)))))))))
